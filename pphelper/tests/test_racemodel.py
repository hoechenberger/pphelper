# -*- coding: utf-8 -*-

"""
Unit and (sort-of) integration tests for ``pphelper``.
"""

from __future__ import division
import numpy as np
import pandas as pd
import os
import tempfile

import matplotlib
# Switch to the non-interactive backend.
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.testing.compare import compare_images

from pphelper.racemodel import gen_step_fun, gen_cdf,\
                               gen_percentiles, get_percentiles_from_cdf,\
                               compare_cdfs_from_raw_rts, \
                               plot_cdfs


def test_gen_step_fun_ordered():
    """
    Ordered RTs (from smallest to largest), no ties)
    """
    rts = np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291])
    n = rts.shape[0]

    expected_p = np.arange(1, n+1) / n
    expected_rts= rts.copy()
    expected = pd.Series(expected_rts, pd.Index(expected_p, name='p'))

    result = gen_step_fun(rts)
    assert result.equals(expected)
    assert result.index.equals(expected.index)


def test_gen_step_fun_unordered():
    """
    Un-Ordered RTs, no ties.
    """
    rts = np.array([274, 249, 291, 257, 260, 268, 271, 264, 277, 244])
    n = rts.shape[0]

    expected_p = np.arange(1, n+1) / n
    expected_rts = np.sort(rts)
    expected = pd.Series(expected_rts, pd.Index(expected_p, name='p'))

    result = gen_step_fun(rts)
    assert result.equals(expected)
    assert result.index.equals(expected.index)


def test_gen_step_fun_with_ties():
    """
    Ordered RTs with ties
    """
    rts = np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])
    n = np.unique(rts).shape[0]

    expected_p = np.arange(1, n+1) / n
    expected_rts = np.unique(rts)
    expected = pd.Series(expected_rts, pd.Index(expected_p, name='p'))

    result = gen_step_fun(rts)
    assert result.equals(expected)
    assert result.index.equals(expected.index)


def test_gen_cdf():
    """
    Test the gen_cdf() function.
    """
    rts = {'x': np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291]),
           'y': np.array([245, 246, 248, 250, 251, 252, 253, 254, 255, 259, 263, 265, 279, 282, 284, 319]),
           'z': np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])}

    rt_max = np.max([np.max(rts[key]) for key in rts.keys()])

    index_expected = pd.Index(np.arange(rt_max + 1), name='t')
    cdfs_expected = {'x': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,   0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.05      ,
                                              0.07      ,  0.09      ,  0.11      ,  0.13      ,  0.15      ,
                                              0.1625    ,  0.175     ,  0.1875    ,  0.2       ,  0.2125    ,
                                              0.225     ,  0.2375    ,  0.25      ,  0.28333333,  0.31666667,
                                              0.35      ,  0.375     ,  0.4       ,  0.425     ,  0.45      ,
                                              0.475     ,  0.5       ,  0.525     ,  0.55      ,  0.58333333,
                                              0.61666667,  0.65      ,  0.68333333,  0.71666667,  0.75      ,
                                              0.78333333,  0.81666667,  0.85      ,  0.85714286,  0.86428571,
                                              0.87142857,  0.87857143,  0.88571429,  0.89285714,  0.9       ,
                                              0.90714286,  0.91428571,  0.92142857,  0.92857143,  0.93571429,
                                              0.94285714,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ]),
                                    index=index_expected),
                     'y': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.03125   ,  0.09375   ,  0.125     ,  0.15625   ,  0.1875    ,
                                              0.21875   ,  0.28125   ,  0.34375   ,  0.40625   ,  0.46875   ,
                                              0.53125   ,  0.546875  ,  0.5625    ,  0.578125  ,  0.59375   ,
                                              0.609375  ,  0.625     ,  0.640625  ,  0.65625   ,  0.6875    ,
                                              0.71875   ,  0.72321429,  0.72767857,  0.73214286,  0.73660714,
                                              0.74107143,  0.74553571,  0.75      ,  0.75446429,  0.75892857,
                                              0.76339286,  0.76785714,  0.77232143,  0.77678571,  0.78125   ,
                                              0.80208333,  0.82291667,  0.84375   ,  0.875     ,  0.90625   ,
                                              0.90803571,  0.90982143,  0.91160714,  0.91339286,  0.91517857,
                                              0.91696429,  0.91875   ,  0.92053571,  0.92232143,  0.92410714,
                                              0.92589286,  0.92767857,  0.92946429,  0.93125   ,  0.93303571,
                                              0.93482143,  0.93660714,  0.93839286,  0.94017857,  0.94196429,
                                              0.94375   ,  0.94553571,  0.94732143,  0.94910714,  0.95089286,
                                              0.95267857,  0.95446429,  0.95625   ,  0.95803571,  0.95982143,
                                              0.96160714,  0.96339286,  0.96517857,  0.96696429,  1.        ]),
                                    index=index_expected),
                     'z': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.03846154,
                                              0.05769231,  0.07692308,  0.09615385,  0.11538462,  0.17307692,
                                              0.23076923,  0.28205128,  0.33333333,  0.38461538,  0.44230769,
                                              0.5       ,  0.51282051,  0.52564103,  0.53846154,  0.55128205,
                                              0.56410256,  0.57692308,  0.6025641 ,  0.62820513,  0.65384615,
                                              0.69230769,  0.73076923,  0.75641026,  0.78205128,  0.80769231,
                                              0.81468531,  0.82167832,  0.82867133,  0.83566434,  0.84265734,
                                              0.84965035,  0.85664336,  0.86363636,  0.87062937,  0.87762238,
                                              0.88461538,  0.89230769,  0.9       ,  0.90769231,  0.91538462,
                                              0.92307692,  0.93076923,  0.93846154,  0.94615385,  0.95384615,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                              1.        ,  1.        ,  1.        ,  1.        ,  1.        ]),
                                    index=index_expected),
                     'b': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                              0.        ,  0.        ,  0.        ,  0.        ,  0.05      ,
                                              0.10125   ,  0.18375   ,  0.235     ,  0.28625   ,  0.3375    ,
                                              0.38125   ,  0.45625   ,  0.53125   ,  0.60625   ,  0.68125   ,
                                              0.75625   ,  0.784375  ,  0.8125    ,  0.86145833,  0.91041667,
                                              0.959375  ,  1.        ,  1.040625  ,  1.08125   ,  1.1375    ,
                                              1.19375   ,  1.22321429,  1.25267857,  1.28214286,  1.31994048,
                                              1.3577381 ,  1.39553571,  1.43333333,  1.47113095,  1.50892857,
                                              1.54672619,  1.58452381,  1.62232143,  1.63392857,  1.64553571,
                                              1.6735119 ,  1.7014881 ,  1.72946429,  1.76785714,  1.80625   ,
                                              1.81517857,  1.82410714,  1.83303571,  1.84196429,  1.85089286,
                                              1.85982143,  1.91875   ,  1.92053571,  1.92232143,  1.92410714,
                                              1.92589286,  1.92767857,  1.92946429,  1.93125   ,  1.93303571,
                                              1.93482143,  1.93660714,  1.93839286,  1.94017857,  1.94196429,
                                              1.94375   ,  1.94553571,  1.94732143,  1.94910714,  1.95089286,
                                              1.95267857,  1.95446429,  1.95625   ,  1.95803571,  1.95982143,
                                              1.96160714,  1.96339286,  1.96517857,  1.96696429,  2.        ]),
                                    index=index_expected)}

    cdfs = dict()
    for key in rts.keys():
        rt = rts[key]
        cdfs[key] = gen_cdf(rt, t_max=rt_max)

        del rt

    cdfs['b'] = cdfs['x'] + cdfs['y']

    # Round the RTs.
    for key in cdfs.keys():
        cdfs[key] = cdfs[key].round()
        cdfs_expected[key] = cdfs_expected[key].round()

    # Now test if expected and actual results are identical.
    for key in cdfs.keys():
        # Compare values.
        assert cdfs[key].equals(cdfs_expected[key])
        # Compare indices.
        assert cdfs[key].index.equals(cdfs_expected[key].index)


def test_gen_cdf_tmax_is_none():
    """
    No t_max supplied to gen_cdf().
    """
    rts = np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291])

    index_expected = pd.Index(np.arange(rts.max() + 1), name='t')
    cdf_expected = pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,   0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                       0.        ,  0.        ,  0.        ,  0.        ,  0.05      ,
                                       0.07      ,  0.09      ,  0.11      ,  0.13      ,  0.15      ,
                                       0.1625    ,  0.175     ,  0.1875    ,  0.2       ,  0.2125    ,
                                       0.225     ,  0.2375    ,  0.25      ,  0.28333333,  0.31666667,
                                       0.35      ,  0.375     ,  0.4       ,  0.425     ,  0.45      ,
                                       0.475     ,  0.5       ,  0.525     ,  0.55      ,  0.58333333,
                                       0.61666667,  0.65      ,  0.68333333,  0.71666667,  0.75      ,
                                       0.78333333,  0.81666667,  0.85      ,  0.85714286,  0.86428571,
                                       0.87142857,  0.87857143,  0.88571429,  0.89285714,  0.9       ,
                                       0.90714286,  0.91428571,  0.92142857,  0.92857143,  0.93571429,
                                       0.94285714,  1.        ]),
                             index=index_expected)

    cdf = gen_cdf(rts)

    assert cdf.round(decimals=8).equals(cdf_expected)
    assert cdf.index.equals(cdf_expected.index)


def test_gen_percentiles():
    """
    Test gen_percentiles().
    """
    assert np.array_equal(gen_percentiles(10),
                          np.array([ 0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95]))

    assert np.allclose(gen_percentiles(13),
                       np.array([0.03846154,  0.11538462,  0.19230769,  0.26923077,  0.34615385,
                                 0.42307692,  0.5       ,  0.57692308,  0.65384615,  0.73076923,
                                 0.80769231,  0.88461538,  0.96153846]))


def test_get_percentiles_from_cdf():
    """
    Test get_percentiles_from_cdf().
    """
    p = gen_percentiles(10)
    rt_max = 319
    index = pd.Index(np.arange(rt_max + 1), name='t')

    cdfs = {'z': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.03846154,
                                     0.05769231,  0.07692308,  0.09615385,  0.11538462,  0.17307692,
                                     0.23076923,  0.28205128,  0.33333333,  0.38461538,  0.44230769,
                                     0.5       ,  0.51282051,  0.52564103,  0.53846154,  0.55128205,
                                     0.56410256,  0.57692308,  0.6025641 ,  0.62820513,  0.65384615,
                                     0.69230769,  0.73076923,  0.75641026,  0.78205128,  0.80769231,
                                     0.81468531,  0.82167832,  0.82867133,  0.83566434,  0.84265734,
                                     0.84965035,  0.85664336,  0.86363636,  0.87062937,  0.87762238,
                                     0.88461538,  0.89230769,  0.9       ,  0.90769231,  0.91538462,
                                     0.92307692,  0.93076923,  0.93846154,  0.94615385,  0.95384615,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ,
                                     1.        ,  1.        ,  1.        ,  1.        ,  1.        ]),
                           index=index),
            'b': pd.Series(np.array([0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                                     0.        ,  0.        ,  0.        ,  0.        ,  0.05      ,
                                     0.10125   ,  0.18375   ,  0.235     ,  0.28625   ,  0.3375    ,
                                     0.38125   ,  0.45625   ,  0.53125   ,  0.60625   ,  0.68125   ,
                                     0.75625   ,  0.784375  ,  0.8125    ,  0.86145833,  0.91041667,
                                     0.959375  ,  1.        ,  1.040625  ,  1.08125   ,  1.1375    ,
                                     1.19375   ,  1.22321429,  1.25267857,  1.28214286,  1.31994048,
                                     1.3577381 ,  1.39553571,  1.43333333,  1.47113095,  1.50892857,
                                     1.54672619,  1.58452381,  1.62232143,  1.63392857,  1.64553571,
                                     1.6735119 ,  1.7014881 ,  1.72946429,  1.76785714,  1.80625   ,
                                     1.81517857,  1.82410714,  1.83303571,  1.84196429,  1.85089286,
                                     1.85982143,  1.91875   ,  1.92053571,  1.92232143,  1.92410714,
                                     1.92589286,  1.92767857,  1.92946429,  1.93125   ,  1.93303571,
                                     1.93482143,  1.93660714,  1.93839286,  1.94017857,  1.94196429,
                                     1.94375   ,  1.94553571,  1.94732143,  1.94910714,  1.95089286,
                                     1.95267857,  1.95446429,  1.95625   ,  1.95803571,  1.95982143,
                                     1.96160714,  1.96339286,  1.96517857,  1.96696429,  2.        ]),
                           index=index)}

    percentiles_expected = {'z': pd.Series([234.6, 238.6, 240.4, 242.3, 244.1, 248.9, 253.9, 256.8, 265.1, 278.5],
                                           index=pd.Index(p, name='p')),
                            'b': pd.Series([244.0, 245.6, 247.3, 249.3, 250.9, 252.3, 253.6, 254.9, 257.8, 259.8],
                                           index=pd.Index(p, name='p'))}

    percentiles = {'z': get_percentiles_from_cdf(cdfs['z'], p),
                   'b': get_percentiles_from_cdf(cdfs['b'], p)}

    # Compare values.
    assert percentiles['z'].round().equals(percentiles_expected['z'].round())
    assert percentiles['b'].round().equals(percentiles_expected['b'].round())

    # Compare indices.
    assert percentiles['z'].index.equals(percentiles_expected['z'].index)
    assert percentiles['b'].index.equals(percentiles_expected['b'].index)


def test_compare_cdfs_from_raw_rts():
    """
    Test compare_cdfs_from_raw_rts().
    """
    rts = {'x': np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291]),
           'y': np.array([245, 246, 248, 250, 251, 252, 253, 254, 255, 259, 263, 265, 279, 282, 284, 319]),
           'z': np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])}

    p = np.array([0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95])

    results_expected = pd.DataFrame({'A': np.array([ 244.,     249.,     257.,     260.,     264.,
                                                     268.,     271.,     274.,     277.,  290.125]),
                                     'B': np.array([245.3,  247.8,  250.5,  252.1,  253.7,
                                                    256.2,  262.6,  272.,   282.2,  308.5]),
                                     'AB': np.array([ 234.6,         238.6,         240.375,       242.325,      244.13333333,
                                                      248.9,         253.85,        256.75,        265.05,        278.5       ]),
                                     'A+B': np.array([244.,          245.59090909,  247.29268293,  249.28571429,  250.91666667,
                                                      252.25,        253.58333333,  254.91666667,  257.76595745,  259.80851064])},
                                    index=pd.Index(p, name='p'))

    # Order columns.
    results_expected = results_expected[['A', 'B', 'AB', 'A+B']]

    results = compare_cdfs_from_raw_rts(rts['x'], rts['y'], rts['z'])

    # Round the results for comparison.
    results = results.apply(np.around, axis=0)
    results_expected = results_expected.apply(np.around, axis=0)

    # Compare values.
    assert results.equals(results_expected)
    # Compare indices.
    assert results.index.equals(results_expected.index)


def compare_cdfs_from_raw_rts_with_percentiles_argument():
    """
    ``percentiles`` argument is passed.
    """
    rts = {'x': np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291]),
           'y': np.array([245, 246, 248, 250, 251, 252, 253, 254, 255, 259, 263, 265, 279, 282, 284, 319]),
           'z': np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])}

    p = np.array([0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95])

    results_expected = pd.DataFrame({'A': np.array([ 244.,     249.,     257.,     260.,     264.,
                                                     268.,     271.,     274.,     277.,  290.125]),
                                     'B': np.array([245.3,  247.8,  250.5,  252.1,  253.7,
                                                    256.2,  262.6,  272.,   282.2,  308.5]),
                                     'AB': np.array([ 234.6,         238.6,         240.375,       242.325,      244.13333333,
                                                      248.9,         253.85,        256.75,        265.05,        278.5       ]),
                                     'A+B': np.array([244.,          245.59090909,  247.29268293,  249.28571429,  250.91666667,
                                                      252.25,        253.58333333,  254.91666667,  257.76595745,  259.80851064])},
                                    index=pd.Index(p, name='p'))

    # Order columns.
    results_expected = results_expected[['A', 'B', 'AB', 'A+B']]

    results = compare_cdfs_from_raw_rts(rts['x'], rts['y'], rts['z'],
                                        percentiles=p)

    # Round the results for comparison.
    results = results.apply(np.around, axis=0)
    results_expected = results_expected.apply(np.around, axis=0)

    # Compare values.
    assert results.equals(results_expected)
    # Compare indices.
    assert results.index.equals(results_expected.index)


def compare_cdfs_from_raw_rts_with_names_argument():
    """
    ``names`` argument is passed.
    """
    rts = {'x': np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291]),
           'y': np.array([245, 246, 248, 250, 251, 252, 253, 254, 255, 259, 263, 265, 279, 282, 284, 319]),
           'z': np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])}

    p = np.array([0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95])

    results_expected = pd.DataFrame({'A': np.array([ 244.,     249.,     257.,     260.,     264.,
                                                     268.,     271.,     274.,     277.,  290.125]),
                                     'V': np.array([245.3,  247.8,  250.5,  252.1,  253.7,
                                                    256.2,  262.6,  272.,   282.2,  308.5]),
                                     'AV': np.array([ 234.6,         238.6,         240.375,       242.325,      244.13333333,
                                                      248.9,         253.85,        256.75,        265.05,        278.5       ]),
                                     'A+V': np.array([244.,          245.59090909,  247.29268293,  249.28571429,  250.91666667,
                                                      252.25,        253.58333333,  254.91666667,  257.76595745,  259.80851064])},
                                    index=pd.Index(p, name='p'))

    # Order columns.
    results_expected = results_expected[['A', 'V', 'AV', 'A+V']]

    results = compare_cdfs_from_raw_rts(rts['x'], rts['y'], rts['z'],
                                        names=['A', 'V', 'AV', 'A+V'])

    results = results.apply(np.around, axis=0)
    results_expected = results_expected.apply(np.around, axis=0)

    # Compare values.
    assert results.equals(results_expected)
    # Compare indices.
    assert results.index.equals(results_expected.index)


def compare_cdfs_from_raw_rts_with_percentiles_and_names_argument():
    """
    ``percentiles`` and ``names`` arguments are passed.
    """
    rts = {'x': np.array([244, 249, 257, 260, 264, 268, 271, 274, 277, 291]),
           'y': np.array([245, 246, 248, 250, 251, 252, 253, 254, 255, 259, 263, 265, 279, 282, 284, 319]),
           'z': np.array([234, 238, 240, 240, 243, 243, 245, 251, 254, 256, 259, 270, 280])}

    p = np.array([0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95])

    results_expected = pd.DataFrame({'A': np.array([244.,     249.,     257.,     260.,     264.,
                                                    268.,     271.,     274.,     277.,  290.125]),
                                     'V': np.array([245.3,  247.8,  250.5,  252.1,  253.7,
                                                    256.2,  262.6,  272.,   282.2,  308.5]),
                                     'AV': np.array([234.6,         238.6,         240.375,       242.325,      244.13333333,
                                                     248.9,         253.85,        256.75,        265.05,        278.5       ]),
                                     'A+V': np.array([244.,          245.59090909,  247.29268293,  249.28571429,  250.91666667,
                                                      252.25,        253.58333333,  254.91666667,  257.76595745,  259.80851064])},
                                    index=pd.Index(p, name='p'))

    results_expected = results_expected[['A', 'V', 'AV', 'A+V']]

    results = compare_cdfs_from_raw_rts(rts['x'], rts['y'], rts['z'],
                                        percentiles=p,
                                        names=['A', 'V', 'AV', 'A+V'])

    results = results.apply(np.around, axis=0)
    results_expected = results_expected.apply(np.around, axis=0)

    # Compare values.
    assert results.equals(results_expected)
    # Compare indices.
    assert results.index.equals(results_expected.index)


def test_plot_cdfs_save():
    # Larger fonts in plots
    matplotlib.rcParams.update({'font.size': 22})

    temp_dir = tempfile.gettempdir()
    outfile_expected = os.path.join(temp_dir, 'pphelper-test_plot_cdfs.png')
    outfile = os.path.join(temp_dir, 'pphelper-plot_cdfs.png')

    p = np.array([0.05,  0.15,  0.25,  0.35,  0.45,  0.55,  0.65,  0.75,  0.85,  0.95])

    data = pd.DataFrame({'A': np.array([244.,     249.,     257.,     260.,     264.,
                                        268.,     271.,     274.,     277.,  290.125]),
                         'V': np.array([245.3,  247.8,  250.5,  252.1,  253.7,
                                        256.2,  262.6,  272.,   282.2,  308.5]),
                         'AV': np.array([234.6,         238.6,         240.375,       242.325,      244.13333333,
                                         248.9,         253.85,        256.75,        265.05,        278.5       ]),
                         'A+V': np.array([244.,          245.59090909,  247.29268293,  249.28571429,  250.91666667,
                                          252.25,        253.58333333,  254.91666667,  257.76595745,  259.80851064])},
                        index=pd.Index(p, name='p'))

    # Order columns.
    data = data[['A', 'V', 'AV', 'A+V']]

    colors = {'A': '#7fc97f',
              'V': '#beaed4',
              'AV': '#fdc086',
              'A+V': '#686665'}

    plt.figure(figsize=[12,8])
    plt.hold(True)
    for modality in data.columns:
        plt.plot(data[modality], data.index, '--o', label=modality,
                 color=colors[modality], linewidth=3, markersize=10,
                 alpha=0.7)

    plt.yticks(data.index)
    plt.grid(True)
    plt.title('Response Time Distributions', weight='bold')
    plt.xlabel('RT', weight='bold')
    plt.ylabel('Proportion of Responses', weight='bold')
    plt.legend(loc='lower right')
    plt.tight_layout()
    plt.savefig(outfile_expected)

    plot_cdfs(data, colors=colors, outfile=outfile)

    # `result` will be non-empty if the comparison fails.
    result = compare_images(outfile_expected, outfile, 0.001)
    assert not result
